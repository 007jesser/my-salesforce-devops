trigger:
  branches:
    include:
      - main
      - dev
      - feature/*

pool:
  name: Default

variables:
  SCRATCH_ORG_ALIAS: 'ci-scratch-org'
  SCRATCH_DEF_FILE: 'config/project-scratch-def.json'
  PMD_RULESET: 'rulesets/apex/quickstart.xml'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '18.x'
  displayName: 'Install Node.js'

- task: PowerShell@2
  displayName: 'Clean existing Salesforce CLI files'
  inputs:
    targetType: 'inline'
    script: |
      $sfdxPath = "$(Agent.ToolsDirectory)\node\18.20.8\x86\sfdx.cmd"
      $sfdxFolder = "$(Agent.ToolsDirectory)\node\18.20.8\x86\node_modules\sfdx-cli"
      if (Test-Path $sfdxPath) {
        Remove-Item $sfdxPath -Force -ErrorAction SilentlyContinue
        Write-Host "Deleted existing sfdx.cmd"
      }
      if (Test-Path $sfdxFolder) {
        Remove-Item $sfdxFolder -Recurse -Force -ErrorAction SilentlyContinue
        Write-Host "Deleted existing sfdx-cli folder"
      }

- script: |
    npm install -g @salesforce/cli --force
    sf --version
  displayName: 'Install Salesforce CLI'

- checkout: self

- task: DownloadSecureFile@1
  name: fetchDevhubAuth
  inputs:
    secureFile: 'jesser.sallemi18@resourceful-koala-vbyb01.com.json'

- task: PowerShell@2
  displayName: 'Restore DevHub Auth as devhub.json'
  inputs:
    targetType: 'inline'
    script: |
      $authFilename = "jesser.sallemi18@resourceful-koala-vbyb01.com.json"
      $source = "$(Agent.TempDirectory)\$authFilename"
      $destinationDir = "$env:USERPROFILE\.sfdx"
      $destinationFile = "$destinationDir\devhub.json"

      Write-Host "Checking if auth file exists at: $source"
      if (!(Test-Path $source)) {
        Write-Error "Secure file not found: $source"
        exit 1
      }

      if (!(Test-Path $destinationDir)) {
        New-Item -ItemType Directory -Path $destinationDir -Force | Out-Null
      }

      Copy-Item $source $destinationFile -Force
      Write-Host "âœ… DevHub auth restored to $destinationFile"

- task: PowerShell@2
  displayName: 'List .sfdx directory contents'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Contents of .sfdx folder:"
      Get-ChildItem "$env:USERPROFILE\.sfdx"

- task: PowerShell@2
  displayName: 'Check devhub.json username'
  inputs:
    targetType: 'inline'
    script: |
      $authFile = "$env:USERPROFILE\.sfdx\devhub.json"
      if (Test-Path $authFile) {
        $json = Get-Content $authFile | ConvertFrom-Json
        Write-Host "Dev Hub username from auth file: $($json.username)"
      } else {
        Write-Error "devhub.json not found"
        exit 1
      }

- script: |
    sf org create scratch --definition-file $(SCRATCH_DEF_FILE) --alias $(SCRATCH_ORG_ALIAS) --set-default --target-dev-hub devhub
  displayName: 'Create Scratch Org'

- script: |
    echo "Running PMD Static Code Analysis"
    pmd-bin-7.16.0\bin\pmd.bat check -d force-app -R $(PMD_RULESET) -f text
  displayName: 'Run PMD Code Analysis'

- script: |
    echo "Running Apex tests"
    sf apex test run --wait 10 --result-format human --code-coverage
  displayName: 'Run Apex Tests'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/test-results.xml'
    testRunTitle: 'Apex Test Results'

- script: |
    echo "Deploying source to Scratch Org"
    sf deploy metadata --target-org $(SCRATCH_ORG_ALIAS) --wait 10
  displayName: 'Deploy to Scratch Org'
